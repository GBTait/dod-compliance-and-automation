control 'VCFB-9X-000047' do
  title 'The VMware Cloud Foundation SDDC Manager NGINX server must invalidate session identifiers upon hosted application user logout or other session termination.'
  desc  "
    Captured sessions can be reused in \"replay\" attacks. This requirement limits the ability of adversaries from capturing and continuing to employ previously valid session IDs.

    Session IDs are tokens generated by web applications to uniquely identify an application user's session. Unique session IDs help to reduce predictability of said identifiers. When a user logs out, or when any other session termination event occurs, the web server must terminate the user session to minimize the potential for an attacker to hijack that particular user session.
  "
  desc  'rationale', ''
  desc  'check', "
    Verify a session timeout is configured in the http context.

    View the running configuration by running the following command:

    # nginx -T 2>&1 | sed -n '/\\sserver\\s{/{:a;N;/.*location/!ba;/.*listen.*ssl/p}' | grep ssl_session_timeout

    Example configuration:

    http {
      ssl_session_timeout 5m;
    }

    If the \"ssl_session_timeout\" directive is configured in the http context and not 10 minutes or less, this is a finding.

    If the \"ssl_session_timeout\" directive is NOT configured in the http context and any server contexts, this is NOT a finding.

    Note: The default value of \"ssl_session_timeout\" if not specified is 5 minutes.
  "
  desc 'fix', "
    Navigate to and open:

    The nginx.conf (/etc/nginx/nginx.conf by default) file.

    Update the following line in the http/server context where defined or remove it completely from any http/server contexts:

    ssl_session_timeout 5m;

    Reload the NGINX configuration by running the following command:

    # nginx -s reload
  "
  impact 0.5
  tag severity: 'medium'
  tag gtitle: 'SRG-APP-000220-WSR-000201'
  tag satisfies: ['SRG-APP-000295-WSR-000012', 'SRG-APP-000295-WSR-000134']
  tag gid: 'V-VCFB-9X-000047'
  tag rid: 'SV-VCFB-9X-000047'
  tag stig_id: 'VCFB-9X-000047'
  tag cci: ['CCI-001185', 'CCI-002361']
  tag nist: ['AC-12', 'SC-23 (1)']

  nginx_ssl_session_timeout = input('nginx_ssl_session_timeout')
  servers = nginx_conf_custom(input('nginx_conf_path')).servers
  http_ssl_session_timeout = nginx_conf_custom(input('nginx_conf_path')).params['http'][0]['ssl_session_timeout']

  describe.one do
    describe 'found ssl_session_timeout defined in http context:' do
      subject { http_ssl_session_timeout }
      it { should include [nginx_ssl_session_timeout] }
    end
    describe 'No ssl_session_timeout defined in http context:' do
      subject { http_ssl_session_timeout }
      it { should be nil }
    end
  end
  servers.each do |server|
    next unless server.params['listen'].flatten.include?('ssl')
    server_ssl_session_timeout = server.params['ssl_session_timeout']
    if server_ssl_session_timeout
      describe "Found ssl_session_timeout defined in server context with listener: #{server.params['listen'].flatten}" do
        subject { server_ssl_session_timeout }
        it { should include [nginx_ssl_session_timeout] }
      end
    else
      describe "No ssl_session_timeout defined in server context with listener: #{server.params['listen'].flatten}" do
        subject { server_ssl_session_timeout }
        it { should be nil }
      end
    end
  end
end
